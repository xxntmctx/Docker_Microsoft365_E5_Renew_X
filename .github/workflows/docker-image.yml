# 工作流的名称
name: Build and Push Docker Image

# 定义触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 允许你手动从 Actions 标签页触发此工作流
  workflow_dispatch:

# 定义工作流中的任务
jobs:
  build-and-push:
    # 任务运行的虚拟机环境
    runs-on: ubuntu-latest

    # 任务的步骤
    steps:
      # 第 1 步：检出你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第 2 步：登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 第 3 步：构建 Docker 镜像并推送到 Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # 指向你的 Dockerfile 文件
          file: ./Dockerfile
          # 将镜像推送到仓库
          push: true
          # 为镜像打上标签，格式为: your-username/repository-name:tag
          # latest 标签表示最新版本
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ms365-e5-renew-x:latest```

#### 代码解释

*   `on: push: branches: [ "main" ]`：表示任何时候当你向 `main` 分支推送代码时，这个工作流就会被触发。
*   `on: workflow_dispatch:`：允许你手动运行这个工作流。
*   `actions/checkout@v4`：一个官方的 Action，用于检出（下载）你的代码。
*   `docker/login-action@v3`：用于登录 Docker 仓库的 Action。它会安全地使用我们之前在 Secrets 中设置的用户名和令牌。
*   `docker/build-push-action@v5`：这是核心步骤，它会：
    *   `context: .`：告诉 Docker 在仓库的根目录中寻找构建上下文。
    *   `file: ./Dockerfile`：明确指定使用根目录下的 `Dockerfile` 文件。
    *   `push: true`：在构建成功后，将镜像推送到仓库。
    *   `tags: ...`：给你的镜像命名。你需要将 `DOCKERHUB_USERNAME` 替换为你的真实用户名，或者直接硬编码，例如 `hanhongyong/ms365-e5-renew-x:latest`。使用 Secret 是更灵活的方式。

### 第 3 步：提交并查看结果

1.  将你创建的 `.github/workflows/docker-build-push.yml` 文件提交并推送到你的 GitHub 仓库。
2.  推送完成后，进入仓库的 "Actions" 标签页。
3.  你会看到一个名为 "Build and Push Docker Image" 的工作流正在运行或已经完成。
4.  点击进入可以查看每一步的详细日志。如果一切顺利，最后一步的日志会显示镜像已成功推送到 Docker Hub。

现在，每当你更新代码并推送到 `main` 分支，GitHub Actions 都会自动为你构建一个新的 `:latest` 镜像并发布，实现了完全自动化的流程。
